/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsEnum,
  IsDate,
  ValidateNested,
} from "class-validator";
import { EnumContentContentType } from "./EnumContentContentType";
import { Type } from "class-transformer";
import { Language } from "../../language/base/Language";
import { Template } from "../../template/base/Template";
import { EnumContentStatus } from "./EnumContentStatus";

@ObjectType()
class Content {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  audioLink!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  content!: string | null;

  @ApiProperty({
    required: true,
    enum: EnumContentContentType,
  })
  @IsEnum(EnumContentContentType)
  @Field(() => EnumContentContentType, {
    nullable: true,
  })
  contentType?: "Audio" | "Text" | "Html";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: () => Language,
  })
  @ValidateNested()
  @Type(() => Language)
  language?: Language;

  @ApiProperty({
    required: false,
    type: () => [Template],
  })
  @ValidateNested()
  @Type(() => Template)
  @IsOptional()
  questionTemplates?: Array<Template>;

  @ApiProperty({
    required: true,
    enum: EnumContentStatus,
  })
  @IsEnum(EnumContentStatus)
  @Field(() => EnumContentStatus, {
    nullable: true,
  })
  status?: "Active" | "Inactive" | "Locked" | "Deleted" | "Archived";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Content as Content };
