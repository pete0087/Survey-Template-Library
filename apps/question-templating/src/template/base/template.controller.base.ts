/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TemplateService } from "../template.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TemplateCreateInput } from "./TemplateCreateInput";
import { TemplateWhereInput } from "./TemplateWhereInput";
import { TemplateWhereUniqueInput } from "./TemplateWhereUniqueInput";
import { TemplateFindManyArgs } from "./TemplateFindManyArgs";
import { TemplateUpdateInput } from "./TemplateUpdateInput";
import { Template } from "./Template";
import { ContentFindManyArgs } from "../../content/base/ContentFindManyArgs";
import { Content } from "../../content/base/Content";
import { ContentWhereUniqueInput } from "../../content/base/ContentWhereUniqueInput";
import { TemplateLanguageFindManyArgs } from "../../templateLanguage/base/TemplateLanguageFindManyArgs";
import { TemplateLanguage } from "../../templateLanguage/base/TemplateLanguage";
import { TemplateLanguageWhereUniqueInput } from "../../templateLanguage/base/TemplateLanguageWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TemplateControllerBase {
  constructor(
    protected readonly service: TemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Template })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: TemplateCreateInput): Promise<Template> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Template] })
  @ApiNestedQuery(TemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Template[]> {
    const args = plainToClass(TemplateFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Template | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() data: TemplateUpdateInput
  ): Promise<Template | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Template | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/content")
  @ApiNestedQuery(ContentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "read",
    possession: "any",
  })
  async findManyContent(
    @common.Req() request: Request,
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Content[]> {
    const query = plainToClass(ContentFindManyArgs, request.query);
    const results = await this.service.findContent(params.id, {
      ...query,
      select: {
        audioLink: true,
        content: true,
        contentType: true,
        createdAt: true,
        id: true,

        language: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/content")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async connectContent(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: ContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      content: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/content")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async updateContent(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: ContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      content: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/content")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async disconnectContent(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: ContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      content: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/templateLanguages")
  @ApiNestedQuery(TemplateLanguageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TemplateLanguage",
    action: "read",
    possession: "any",
  })
  async findManyTemplateLanguages(
    @common.Req() request: Request,
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<TemplateLanguage[]> {
    const query = plainToClass(TemplateLanguageFindManyArgs, request.query);
    const results = await this.service.findTemplateLanguages(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/templateLanguages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async connectTemplateLanguages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: TemplateLanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templateLanguages: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/templateLanguages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async updateTemplateLanguages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: TemplateLanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templateLanguages: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/templateLanguages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async disconnectTemplateLanguages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: TemplateLanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templateLanguages: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
