/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTemplateLanguageArgs } from "./CreateTemplateLanguageArgs";
import { UpdateTemplateLanguageArgs } from "./UpdateTemplateLanguageArgs";
import { DeleteTemplateLanguageArgs } from "./DeleteTemplateLanguageArgs";
import { TemplateLanguageFindManyArgs } from "./TemplateLanguageFindManyArgs";
import { TemplateLanguageFindUniqueArgs } from "./TemplateLanguageFindUniqueArgs";
import { TemplateLanguage } from "./TemplateLanguage";
import { LanguageFindManyArgs } from "../../language/base/LanguageFindManyArgs";
import { Language } from "../../language/base/Language";
import { TemplateFindManyArgs } from "../../template/base/TemplateFindManyArgs";
import { Template } from "../../template/base/Template";
import { TemplateLanguageService } from "../templateLanguage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TemplateLanguage)
export class TemplateLanguageResolverBase {
  constructor(
    protected readonly service: TemplateLanguageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TemplateLanguage",
    action: "read",
    possession: "any",
  })
  async _templateLanguagesMeta(
    @graphql.Args() args: TemplateLanguageFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TemplateLanguage])
  @nestAccessControl.UseRoles({
    resource: "TemplateLanguage",
    action: "read",
    possession: "any",
  })
  async templateLanguages(
    @graphql.Args() args: TemplateLanguageFindManyArgs
  ): Promise<TemplateLanguage[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TemplateLanguage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TemplateLanguage",
    action: "read",
    possession: "own",
  })
  async templateLanguage(
    @graphql.Args() args: TemplateLanguageFindUniqueArgs
  ): Promise<TemplateLanguage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TemplateLanguage)
  @nestAccessControl.UseRoles({
    resource: "TemplateLanguage",
    action: "create",
    possession: "any",
  })
  async createTemplateLanguage(
    @graphql.Args() args: CreateTemplateLanguageArgs
  ): Promise<TemplateLanguage> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TemplateLanguage)
  @nestAccessControl.UseRoles({
    resource: "TemplateLanguage",
    action: "update",
    possession: "any",
  })
  async updateTemplateLanguage(
    @graphql.Args() args: UpdateTemplateLanguageArgs
  ): Promise<TemplateLanguage | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TemplateLanguage)
  @nestAccessControl.UseRoles({
    resource: "TemplateLanguage",
    action: "delete",
    possession: "any",
  })
  async deleteTemplateLanguage(
    @graphql.Args() args: DeleteTemplateLanguageArgs
  ): Promise<TemplateLanguage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Language], { name: "language" })
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "read",
    possession: "any",
  })
  async resolveFieldLanguage(
    @graphql.Parent() parent: TemplateLanguage,
    @graphql.Args() args: LanguageFindManyArgs
  ): Promise<Language[]> {
    const results = await this.service.findLanguage(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Template], { name: "template" })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async resolveFieldTemplate(
    @graphql.Parent() parent: TemplateLanguage,
    @graphql.Args() args: TemplateFindManyArgs
  ): Promise<Template[]> {
    const results = await this.service.findTemplate(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
